name: 'Develop'

on:
  push:
    branches: [ "develop" ]
  pull_request:

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

env:
  LAMBDA_NAME: lambda
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  BUCKET_CODE: ${{ vars.BUCKET_CODE }}
  BUCKET_STATE: ${{ vars.BUCKET_STATE }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_ASSUME_ROLE: ${{ vars.AWS_ASSUME_ROLE }}

jobs:

  # Build the code
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "16.x"

      # Teste configure credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: arn:aws:iam::$AWS_ACCOUNT_ID:role/${{ env.AWS_ASSUME_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: $LAMBDA_NAME-role-session

      # NPM INstall
      - name: Install all dependencies
        working-directory: app
        run: npm install --frozen-lockfile

      # Package the code as zip
      - name: Ziping
        id: ziping
        working-directory: app
        run: |
          zip -r ../$LAMBDA_NAME.zip . *
          cd ..
          HASH=$(md5sum $LAMBDA_NAME.zip | awk '{print $1}')
          FILE_NAME="$LAMBDA_NAME-$HASH"
          mv $LAMBDA_NAME.zip $FILE_NAME.zip
          echo "Renamed file to $FILE_NAME"
          echo "LAMBDA_NAME=$FILE_NAME" >> $GITHUB_ENV
          echo "lambda_name=$FILE_NAME" >> $GITHUB_OUTPUT

      - run: |
          mkdir artifacts
          cp $LAMBDA_NAME.zip artifacts/

      - uses: actions/upload-artifact@master
        with:
          name: $LAMBDA_NAME.zip
          path: artifacts

    outputs:
      lambda_name: ${{ steps.ziping.outputs.lambda_name }}
        
  terraform:
    runs-on: ubuntu-latest
    needs: build
    env:
      LAMBDA_NAME: ${{ needs.build.outputs.lambda_name }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@master
        with:
          name: $LAMBDA_NAME.zip
          path: artifacts

      # AWS Config
      #- name: Configure AWS credentials
      #  uses: aws-actions/configure-aws-credentials@v1
      #  with:
      #    aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
      #    aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
      #    aws-region: ${{ env.AWS_REGION }}

      # Upload Atifacts 
      - name: Upload Lambda package to S3
        run: |
          echo ${{  needs.build.outputs.lambda_name }}
          aws s3 cp artifacts/$LAMBDA_NAME.zip s3://$BUCKET_CODE/$LAMBDA_NAME.zip

      # Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: Terraform set backend
        working-directory: infra
        run: |
          cat <<EOT >> backend.tf
          terraform {
            backend "s3" {
            }
          }
          EOT

          cat backend.tf

      - name: Terraform Init
        working-directory: infra
        run: |
          terraform init \
             -backend=true \
            -backend-config="bucket=$BUCKET_STATE" \
            -backend-config="key=lambda-actions-workflow/terraform.tfstate" \
            -backend-config="region=$AWS_REGION" 

      - name: Terraform Plan
        working-directory: infra
        run: |
          terraform plan \
            -var-file=terraform.tfvars \
            -var "code_key=$LAMBDA_NAME.zip" \
            -var "bucket_source_code=$BUCKET_CODE" \
            -var "aws_region=$AWS_REGION"

      - name: Set Terraform Log Level
        run: echo "TF_LOG=INFO" >> $GITHUB_ENV

      - name: Terraform Apply
        working-directory: infra
        run: |
          terraform apply -auto-approve \
            -var-file=terraform.tfvars \
            -var "code_key=$LAMBDA_NAME.zip" \
            -var "bucket_source_code=$BUCKET_CODE" \
            -var "aws_region=$AWS_REGION"
